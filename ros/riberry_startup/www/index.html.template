<!DOCTYPE html>
<html>
<head>
    <title>ROS Package Selector</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/roslib@1.3.0/build/roslib.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 20px;
            background-color: #f0f0f0;
        }

        h1 {
            color: #333;
        }

        .package-list {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            list-style-type: none;
            padding: 0;
        }

        .package-list li {
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            margin: 10px;
            width: 200px;
            transition: transform 0.2s;
        }

        .package-list li:hover {
            transform: scale(1.05);
        }

        .package-list a {
            text-decoration: none;
            color: #007bff;
            font-size: 18px;
            display: block;
            padding: 20px;
        }

        .package-list a:hover {
            color: #0056b3;
        }

        @media (max-width: 600px) {
            .package-list li {
                width: 90%;
            }
        }
    </style>
</head>
<body>
    <h1>Select a ROS Package</h1>
    <ul id="package-list" class="package-list">
        <!-- Package list will be populated here by JavaScript -->
    </ul>
    <script>
        var namespace = '{{namespace}}';

        // Connect to ROS
        var ros = new ROSLIB.Ros({
            url: 'ws://' + window.location.hostname + ':9090'
        });

        ros.on('connection', function() {
            console.log('Connected to websocket server.');
        });

        ros.on('error', function(error) {
            console.log('Error connecting to websocket server: ', error);
        });

        ros.on('close', function() {
            console.log('Connection to websocket server closed.');
        });

        // Service client to call the package list service within the namespace
        var listPackagesClient = new ROSLIB.Service({
            ros: ros,
            name: `${namespace}/list_www_packages`,
            serviceType: 'std_srvs/Trigger'
        });

        function fetchPackages() {
            var request = new ROSLIB.ServiceRequest({});
            listPackagesClient.callService(request, function(result) {
                if (result.success) {
                    var packages = result.message.split(',');
                    var packageList = document.getElementById('package-list');
                    packageList.innerHTML = '';

                    packages.forEach(pkg => {
                        var listItem = document.createElement('li');
                        var link = document.createElement('a');
                        link.href = `/${pkg}/`;
                        link.textContent = pkg;
                        listItem.appendChild(link);
                        packageList.appendChild(listItem);
                    });
                } else {
                    console.error('Failed to fetch packages:', result.message);
                }
            });
        }

        document.addEventListener('DOMContentLoaded', fetchPackages);
    </script>
</body>
</html>
